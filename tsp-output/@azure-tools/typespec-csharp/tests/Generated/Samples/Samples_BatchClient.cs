// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Compute.Batch.Samples
{
    public partial class Samples_BatchClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_PatchJobSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.PatchJobSchedule("<jobScheduleId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_PatchJobSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.PatchJobScheduleAsync("<jobScheduleId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_PatchJobSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.PatchJobSchedule("<jobScheduleId>", content, timeOutInSeconds: 1234, ocpDate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_PatchJobSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.PatchJobScheduleAsync("<jobScheduleId>", content, timeOutInSeconds: 1234, ocpDate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJobSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ReplaceJobSchedule("<jobScheduleId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJobSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ReplaceJobScheduleAsync("<jobScheduleId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJobSchedule_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            BatchJobSchedule jobSchedule = new BatchJobSchedule();
            Response response = client.ReplaceJobSchedule("<jobScheduleId>", jobSchedule);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJobSchedule_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            BatchJobSchedule jobSchedule = new BatchJobSchedule();
            Response response = await client.ReplaceJobScheduleAsync("<jobScheduleId>", jobSchedule);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJobSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ReplaceJobSchedule("<jobScheduleId>", content, timeOutInSeconds: 1234, ocpDate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJobSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ReplaceJobScheduleAsync("<jobScheduleId>", content, timeOutInSeconds: 1234, ocpDate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJobSchedule_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            BatchJobSchedule jobSchedule = new BatchJobSchedule();
            Response response = client.ReplaceJobSchedule("<jobScheduleId>", jobSchedule, timeOutInSeconds: 1234, ocpDate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJobSchedule_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BatchClient client = new BatchClient(endpoint);

            BatchJobSchedule jobSchedule = new BatchJobSchedule();
            Response response = await client.ReplaceJobScheduleAsync("<jobScheduleId>", jobSchedule, timeOutInSeconds: 1234, ocpDate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }
    }
}
